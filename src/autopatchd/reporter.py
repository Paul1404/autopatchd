"""
Email reporting functionality
"""

import smtplib
import os
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import logging
import socket

from .patcher import PatchResult


class Reporter:
    """Handles email reporting of patch results"""
    
    def __init__(self, config):
        self.config = config
    
    def send_report(self, result: PatchResult, dry_run: bool = False):
        """Send email report of patch results"""
        if not self.config.email.to_addresses:
            logging.info("No email addresses configured, skipping report")
            return
        
        try:
            subject = self._generate_subject(result, dry_run)
            body = self._generate_body(result, dry_run)
            
            self._send_email(subject, body)
            logging.info("Email report sent successfully")
            
        except smtplib.SMTPRecipientsRefused as e:
            logging.error(f"Email recipients refused: {e}")
            print("‚ùå Email delivery failed: Recipients refused")
            print("   Check that email addresses are valid and server allows sending to them")
            
        except smtplib.SMTPAuthenticationError as e:
            logging.error(f"SMTP authentication failed: {e}")
            print("‚ùå Email delivery failed: Authentication error")
            print("   Check SMTP username and password")
            
        except smtplib.SMTPConnectError as e:
            logging.error(f"SMTP connection failed: {e}")
            print("‚ùå Email delivery failed: Cannot connect to SMTP server")
            print(f"   Check SMTP server ({self.config.email.smtp_server}:{self.config.email.smtp_port}) and network connectivity")
            
        except smtplib.SMTPException as e:
            logging.error(f"SMTP error: {e}")
            print(f"‚ùå Email delivery failed: SMTP error - {e}")
            
        except Exception as e:
            logging.error(f"Failed to send email report: {e}")
            print(f"‚ùå Email delivery failed: {e}")
            print("\nüîß Troubleshooting tips:")
            print("   - Verify SMTP server settings with 'autopatchd adjust'")
            print("   - Check firewall/network connectivity")
            print("   - Verify SMTP credentials")
            print("   - Check server access policies (some servers restrict by IP)")
    
    def _generate_subject(self, result: PatchResult, dry_run: bool) -> str:
        """Generate email subject line"""
        hostname = socket.gethostname()
        prefix = "DRY-RUN" if dry_run else "PATCH"
        status = "SUCCESS" if result.success else "FAILED"
        
        if dry_run:
            if result.updates_available:
                return f"[{prefix}] {hostname} - {len(result.updates_available)} updates available"
            else:
                return f"[{prefix}] {hostname} - No updates available"
        else:
            if result.updates_installed:
                return f"[{prefix}] {hostname} - {len(result.updates_installed)} updates installed - {status}"
            else:
                return f"[{prefix}] {hostname} - No updates - {status}"
    
    def _generate_body(self, result: PatchResult, dry_run: bool) -> str:
        """Generate email body"""
        hostname = socket.gethostname()
        
        body = f"""autopatchd Report
{'=' * 50}

Host: {hostname}
Timestamp: {result.timestamp}
Mode: {result.mode}
Type: {'Dry-run' if dry_run else 'Live run'}
Success: {result.success}

"""
        
        if result.error:
            body += f"Error: {result.error}\n\n"
        
        # Updates section
        if result.updates_available:
            body += f"Updates Available ({len(result.updates_available)}):\n"
            body += "-" * 30 + "\n"
            for pkg in result.updates_available:
                body += f"  ‚Ä¢ {pkg}\n"
            body += "\n"
        
        if result.updates_installed:
            body += f"Updates Installed ({len(result.updates_installed)}):\n"
            body += "-" * 30 + "\n"
            for pkg in result.updates_installed:
                body += f"  ‚Ä¢ {pkg}\n"
            body += "\n"
        
        if result.reboot_required:
            body += "‚ö†Ô∏è  REBOOT REQUIRED\n"
            body += f"Reboot policy: {self.config.patching.reboot}\n\n"
        
        # Full output
        body += "Full Output:\n"
        body += "=" * 20 + "\n"
        body += result.output
        body += "\n\n"
        
        body += f"Generated by autopatchd on {hostname}\n"
        
        return body
    
    def _send_email(self, subject: str, body: str):
        """Send email via SMTP"""
        # Load SMTP credentials
        smtp_user, smtp_pass = self._load_smtp_credentials()
        
        # Create message
        msg = MIMEMultipart()
        msg['From'] = self.config.email.from_address
        msg['To'] = ', '.join(self.config.email.to_addresses)
        msg['Subject'] = subject
        
        msg.attach(MIMEText(body, 'plain'))
        
        # Send email with detailed connection info for debugging
        logging.debug(f"Connecting to SMTP server: {self.config.email.smtp_server}:{self.config.email.smtp_port}")
        logging.debug(f"Using TLS: {self.config.email.use_tls}")
        logging.debug(f"SMTP user: {smtp_user}")
        
        try:
            with smtplib.SMTP(self.config.email.smtp_server, self.config.email.smtp_port) as server:
                # Enable debug output for troubleshooting
                if logging.getLogger().isEnabledFor(logging.DEBUG):
                    server.set_debuglevel(1)
                
                if self.config.email.use_tls:
                    server.starttls()
                
                if smtp_user and smtp_pass:
                    server.login(smtp_user, smtp_pass)
                
                server.send_message(msg)
                
        except smtplib.SMTPRecipientsRefused as e:
            # Extract more detailed error info
            detailed_errors = []
            for recipient, (code, message) in e.recipients.items():
                detailed_errors.append(f"{recipient}: {code} {message.decode() if isinstance(message, bytes) else message}")
            raise smtplib.SMTPRecipientsRefused(detailed_errors)
    
    def _load_smtp_credentials(self):
        """Load SMTP credentials from systemd credentials or file"""
        # Try systemd credentials first
        cred_file = "/run/credentials/autopatchd.service/smtp-password.cred"
        if os.path.exists(cred_file):
            return self._parse_credentials(cred_file)
        
        # Fallback to regular file
        cred_file = "/etc/autopatchd/smtp-password.cred"
        if os.path.exists(cred_file):
            return self._parse_credentials(cred_file)
        
        logging.warning("No SMTP credentials found")
        return None, None
    
    def _parse_credentials(self, cred_file: str):
        """Parse credentials file"""
        try:
            with open(cred_file, 'r') as f:
                content = f.read().strip()
            
            smtp_user = None
            smtp_pass = None
            
            for line in content.split('\n'):
                if line.startswith('SMTP_USER='):
                    smtp_user = line.split('=', 1)[1]
                elif line.startswith('SMTP_PASS='):
                    smtp_pass = line.split('=', 1)[1]
            
            return smtp_user, smtp_pass
            
        except Exception as e:
            logging.error(f"Failed to parse credentials: {e}")
            return None, None


def test_smtp_connection(config):
    """Test SMTP connection and authentication"""
    print(f"üîç Testing SMTP connection to {config.email.smtp_server}:{config.email.smtp_port}")
    
    try:
        reporter = Reporter(config)
        smtp_user, smtp_pass = reporter._load_smtp_credentials()
        
        with smtplib.SMTP(config.email.smtp_server, config.email.smtp_port) as server:
            server.set_debuglevel(1)  # Enable debug output
            
            print("‚úÖ Connected to SMTP server")
            
            if config.email.use_tls:
                server.starttls()
                print("‚úÖ TLS enabled")
            
            if smtp_user and smtp_pass:
                server.login(smtp_user, smtp_pass)
                print("‚úÖ Authentication successful")
            else:
                print("‚ÑπÔ∏è  No authentication (credentials not found)")
            
            print("‚úÖ SMTP connection test successful")
            
    except Exception as e:
        print(f"‚ùå SMTP connection test failed: {e}")
        print("\nüîß Troubleshooting:")
        print("   - Check server address and port")
        print("   - Verify credentials")
        print("   - Check firewall settings")
        print("   - Some servers restrict access by IP address")
        return False
    
    return True